package decision_tree;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

public class Table extends ArrayList<Record>{

	public Table(int initialCapacity){
		super(initialCapacity);
	}
	
	public Table() {
		super();
	}
	
	public Table(Collection<? extends Record> c){
		super(c);
	}

	//split a data table into left table and right table based on a given median value
	public void splitOnFeature(Table leftTable, Table rightTable, int featureIndx, double featureValue){
		for(int i = 0; i < this.size(); i++){
			if(this.get(i).features[featureIndx] <= featureValue){
				leftTable.add(this.get(i));
			}else{
				rightTable.add(this.get(i));
			}
		}
	}
	
	public void splitRandomInstances(Table trainTable, Table testTable, int partition){
		Table tmpDataTable = new Table(this);
		Collections.shuffle(tmpDataTable);
		trainTable = new Table(tmpDataTable.subList(0, partition-1));
		testTable = new Table(tmpDataTable.subList(partition, tmpDataTable.size()-1));
//		trainTable = (Table) tmpDataTable.subList(0, partition-1);
////		trainTable = newTrainTable.clone();
//		testTable = (Table) tmpDataTable.subList(partition, tmpDataTable.size()-1);
		trainTable.removeRandomFeatures();	
	}

	public void removeRandomFeatures(){
		int numOfFeatures = this.get(0).getFeatureSize();
		ArrayList<Integer> array = new ArrayList<Integer>(numOfFeatures);
		for (int a =0; a < numOfFeatures; a++) array.add(a);
		Collections.shuffle(array);
		
		ArrayList<Integer> featureSubset = new ArrayList<Integer>(array.subList(0, (int)Math.sqrt(numOfFeatures)));
		for(int i = 0; i < this.size(); i++){
			this.get(i).trimFeatures(featureSubset);
		}
	}

}
